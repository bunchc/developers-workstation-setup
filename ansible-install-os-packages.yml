---
- name: Install OS Packages
  connection: local
  hosts: localhost
  vars:
    arch_packages_install: []
    arch_packages_uninstall: []
    brew_cask_packages_install: []
    brew_cask_packages_uninstall: []
    brew_packages_install: []
    brew_packages_uninstall: []
    debian_packages_install: []
    debian_packages_uninstall: []
    gem_packages_install: []
    gem_packages_uninstall: []
    redhat_packages_install: []
    redhat_packages_uninstall: []
  tasks:
    - name: Define Arch Packages to Install
      ansible.builtin.set_fact:
        arch_packages_install: "{{ arch_packages_install + [item.name] }}"
      loop: "{{ arch_packages }}"
      when: item.state | lower == "present"

    - name: Define Arch Packages to Uninstall
      ansible.builtin.set_fact:
        arch_packages_uninstall: "{{ arch_packages_uninstall + [item.name] }}"
      loop: "{{ arch_packages }}"
      when: item.state | lower == "absent"

    - name: Define Homebrew Cask Packages to Install
      ansible.builtin.set_fact:
        brew_cask_packages_install: "{{ brew_cask_packages_install + [item.name] }}"
      loop: "{{ brew_cask_packages }}"
      when: item.state | lower == "present"

    - name: Define Homebrew Cask Packages to Uninstall
      ansible.builtin.set_fact:
        brew_cask_packages_uninstall: "{{ brew_cask_packages_uninstall + [item.name] }}"
      loop: "{{ brew_cask_packages }}"
      when: item.state | lower == "absent"

    - name: Define Homebrew Packages to Install
      ansible.builtin.set_fact:
        brew_packages_install: "{{ brew_packages_install + [item.name] }}"
      loop: "{{ brew_packages }}"
      when: item.state | lower == "present"

    - name: Define Homebrew Packages to Uninstall
      ansible.builtin.set_fact:
        brew_packages_uninstall: "{{ brew_packages_uninstall + [item.name] }}"
      loop: "{{ brew_packages }}"
      when: item.state | lower == "absent"

    - name: Define Debian Packages to Install
      ansible.builtin.set_fact:
        debian_packages_install: "{{ debian_packages_install + [item.name] }}"
      loop: "{{ debian_packages }}"
      when: item.state | lower == "present"

    - name: Define Debian Packages to Uninstall
      ansible.builtin.set_fact:
        debian_packages_uninstall: "{{ debian_packages_uninstall + [item.name] }}"
      loop: "{{ debian_packages }}"
      when: item.state | lower == "absent"

    - name: Define RedHat Packages to Install
      ansible.builtin.set_fact:
        redhat_packages_install: "{{ redhat_packages_install + [item.name] }}"
      loop: "{{ redhat_packages }}"
      when: item.state | lower == "present"

    - name: Define RedHat Packages to Uninstall
      ansible.builtin.set_fact:
        redhat_packages_uninstall: "{{ redhat_packages_uninstall + [item.name] }}"
      loop: "{{ redhat_packages }}"
      when: item.state | lower == "absent"

    - name: Define Ruby Gems to Install
      ansible.builtin.set_fact:
        gem_packages_install: "{{ gem_packages_install + [item.name] }}"
      loop: "{{ gem_packages }}"
      when: item.state | lower == "present"

    - name: Define Ruby Gems to Uninstall
      ansible.builtin.set_fact:
        gem_packages_uninstall: "{{ gem_packages_uninstall + [item.name] }}"
      loop: "{{ gem_packages }}"
      when: item.state | lower == "absent"

    - name: Apply Arch Linux tasks
      when: ansible_os_family == "Archlinux"
      block:
        - name: Upgrading OS Packages
          community.general.packaging.os.pacman:
            update_cache: true
            upgrade: true
          become: true
          register: result
          until: result is successful

        - name: Installing OS Packages
          community.general.packaging.os.pacman:
            name: "{{ arch_packages_install }}"
            state: present
          become: true
          register: result
          until: result is successful

        - name: Uninstalling OS Packages
          community.general.packaging.os.pacman:
            name: "{{ arch_packages_uninstall }}"
            state: absent
          become: true
          register: result
          until: result is successful

    - name: Apply macOS tasks
      when: ansible_os_family == "Darwin"
      block:
        - name: Set HomeBrew path
          ansible.builtin.set_fact:
            homebrew_path: /usr/local/bin/brew
          when: ansible_architecture != "arm64"

        - name: Set HomeBrew path
          ansible.builtin.set_fact:
            homebrew_path: /opt/homebrew/bin
          when: ansible_architecture == "arm64"

        - name: Ensuring Homebrew Is Installed
          ansible.builtin.stat:
            path: "{{ homebrew_path  }}"
          register: homebrew_check

        - name: Fail If Homebrew Is Not Installed and install_homebrew_if_missing Is False
          ansible.builtin.fail:
            msg: Homebrew is missing...Install from http://brew.sh/
          when:
            - not homebrew_check.stat.exists
            - not install_homebrew_if_missing|bool

        - name: Installing Homebrew
          ansible.builtin.command: >
            /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          when:
            - not homebrew_check.stat.exists
            - install_homebrew_if_missing|bool

#     - name: Apply ansible-hashicorp-toolbox role
#       ansible.builtin.include_role:
#         name: ansible-hashicorp-toolbox
#       when: ansible_os_family not in ['Darwin']

#     - name: Apply ansible-docker role
#       ansible.builtin.include_role:
#         name: ansible-docker
#       when: ansible_os_family in ["ArchLinux", "Debian", "elementary OS", "RedHat"]

#     - name: Apply ansible-virtualbox role
#       ansible.builtin.include_role:
#         name: ansible-virtualbox
#       when: >
#         (ansible_os_family == "Debian" or
#         ansible_distribution == "Fedora" or
#         ansible_os_family == "Archlinux" or
#         ansible_os_family == "elementary OS") and
#         ansible_virtualization_role != "guest"

    - name: Apply macOS Homebrew tasks
      when: ansible_os_family == "Darwin"
      block:
        - name: Updating Homebrew
          community.general.packaging.os.homebrew:
            update_homebrew: "{{ update_homebrew }}"
          register: result
          until: result is successful
          when: homebrew_check.stat.exists

        - name: Upgrading Homebrew Packages
          community.general.packaging.os.homebrew:
            upgrade_all: "{{ upgrade_homebrew_packages }}"
          register: result
          until: result is successful
          when: homebrew_check.stat.exists

        - name: Installing Homebrew Taps
          community.general.packaging.os.homebrew_tap:
            name: "{{ item.name }}"
            state: "{{ item.state }}"
          register: result
          until: result is successful
          loop: "{{ brew_taps }}"
          when: homebrew_check.stat.exists

        - name: Installing Homebrew Cask Packages
          community.general.packaging.os.homebrew_cask:
            name: "{{ brew_cask_packages_install }}"
            state: present
          register: result
          until: result is successful
          when: homebrew_check.stat.exists

        - name: Uninstall Homebrew Cask Packages
          community.general.packaging.os.homebrew_cask:
            name: "{{ brew_cask_packages_uninstall }}"
            state: absent
          register: result
          until: result is successful
          when: homebrew_check.stat.exists

        - name: Installing Homebrew Packages
          community.general.packaging.os.homebrew:
            name: "{{ brew_packages_install }}"
            state: present
          register: result
          until: result is successful
          when: homebrew_check.stat.exists

        - name: Uninstall Homebrew Packages
          community.general.packaging.os.homebrew:
            name: "{{ brew_packages_uninstall }}"
            state: absent
          register: result
          until: result is successful
          when: homebrew_check.stat.exists

    - name: Apply Debian tasks
      when: ansible_os_family in ["Debian", "elementary OS"]
      block:
        - name: Ensuring Initial Pre-Reqs Are Installed
          ansible.builtin.apt:
            name:
              - apt-transport-https
            state: present
          become: true
          register: result
          until: result is successful

        - name: Adding NodeJS Repo Key
          ansible.builtin.apt_key:
            url: https://deb.nodesource.com/gpgkey/nodesource.gpg.key
            state: present
          become: true
          when:
            - ansible_distribution == "Debian"
            - ansible_distribution_version is version('9', '>=')

        - name: Adding NodeJS Repo
          ansible.builtin.apt_repository:
            repo: "{{ 'deb https://deb.nodesource.com/node_11.x ' + ansible_distribution_release | lower + ' main' }}"
            state: present
          become: true
          when:
            - ansible_distribution == "Debian"
            - ansible_distribution_version is version('9', '>=')

        - name: Adding Debian Contrib Component
          ansible.builtin.apt_repository:
            repo: "{{ 'deb http://http.debian.net/debian ' + ansible_distribution_release | lower + ' contrib' }}"
            state: present
          become: true
          when: ansible_distribution == "Debian"

        - name: Updating Apt Cache
          ansible.builtin.apt:
            update_cache: true
            cache_valid_time: 3600
          become: true
          register: result
          until: result is successful

        - name: Installing OS Packages
          ansible.builtin.apt:
            name: "{{ debian_packages_install }}"
            state: present
          become: true
          register: result
          until: result is successful

        - name: Uninstalling OS Packages
          ansible.builtin.apt:
            name: "{{ debian_packages_uninstall }}"
            state: absent
          become: true
          register: result
          until: result is successful

        - name: Installing fonts-firacode
          ansible.builtin.apt:
            name: fonts-firacode
            state: present
          become: true
          register: result
          until: result is successful
          when: >
            (ansible_distribution == "Ubuntu" and
            ansible_distribution_version is version('18.04', '>=')) or
            (ansible_distribution == "Debian" and
            ansible_distribution_version is version('9', '>=')) or
            ansible_distribution == "elementary OS"

#         - name: Installing ATOM Editor
#           ansible.builtin.apt:
#             deb: "{{ atom_editor_dl }}/atom-amd64.deb"
#             state: present
#           become: true
#           register: result
#           until: result is successful

#         - name: Installing Hyper Terminal
#           ansible.builtin.apt:
#             deb: https://github.com/zeit/hyper/releases/download/3.0.2/hyper_3.0.2_amd64.deb
#             state: present
#           become: true
#           register: result
#           until: result is successful

#         # https://www.dropbox.com/install-linux
#         # This should never have to change
#         - name: Installing Dropbox Helper Application
#           ansible.builtin.apt:
#             deb: https://www.dropbox.com/download?dl=packages/ubuntu/dropbox_2020.03.04_amd64.deb
#           become: true
#           register: result
#           until: result is successful

#         - name: Adding Google Chrome Repo Key
#           ansible.builtin.apt_key:
#             url: https://dl-ssl.google.com/linux/linux_signing_key.pub
#             state: present
#           become: true
#           register: result
#           until: result is successful

#         - name: Adding Google Chrome Repo
#           ansible.builtin.apt_repository:
#             repo: deb http://dl.google.com/linux/chrome/deb/ stable main
#             filename: google-chrome
#             state: present
#           become: true

#         - name: Installing Google Chrome
#           ansible.builtin.apt:
#             name: google-chrome-stable
#             state: present
#           become: true
#           register: result
#           until: result is successful

#         - name: Adding Brave Browser Repo Key
#           ansible.builtin.apt_key:
#             url: https://brave-browser-apt-release.s3.brave.com/brave-core.asc
#             state: present
#           become: true
#           register: result
#           until: result is successful
#           when: ansible_distribution != "elementary OS"

#         - name: Adding Brave Browser Repo
#           ansible.builtin.apt_repository:
#             repo: "deb [arch=amd64] https://brave-browser-apt-release.s3.brave.com/ stable main"
#             state: present
#           become: true
#           register: result
#           until: result is successful
#           when: ansible_distribution != "elementary OS"

#         - name: Installing Brave Browser
#           ansible.builtin.apt:
#             name: brave-browser
#             state: present
#           become: true
#           register: result
#           until: result is successful
#           when: ansible_distribution != "elementary OS"

        - name: Adding VS Code Repo Key
          ansible.builtin.get_url:
#           ansible.builtin.apt_key:
            url: https://packages.microsoft.com/keys/microsoft.asc
            dest: /etc/apt/keyrings/
            mode: u=rw,g=r,o=r
#             state: present
          become: true
#           register: result
#           until: result is successful

        - name: Adding VS Code Repo
          ansible.builtin.apt_repository:
            repo: deb [arch=amd64,arm64,armhf signed-by=/etc/apt/keyrings/packages.microsoft.gpg] https://packages.microsoft.com/repos/code stable main
            state: present
          become: true

        - name: Installing VS Code
          ansible.builtin.apt:
            name: code
            state: present
          become: true
          register: result
          until: result is successful

        - name: Removing Redundant VS Code Repo
          ansible.builtin.file:
            path: /etc/apt/sources.list.d/vscode.list
            state: absent
          become: true
          register: _vscode_repo_removed

        - name: Updating Apt Cache
          ansible.builtin.apt:
            update_cache: true
          become: true
          register: result
          until: result is successful
          when: _vscode_repo_removed.changed

        - name: Installing Postman Pre-Reqs
          ansible.builtin.apt:
            name:
              - libgconf-2-4
            state: present
          become: true
          register: result
          until: result is successful
          when: >
            (ansible_distribution == "Ubuntu" and
            ansible_distribution_version is version('18.04', '>=')) or
            ansible_distribution == "elementary OS"

        - name: Installing Postman
          ansible.builtin.unarchive:
            src: https://dl.pstmn.io/download/latest/linux64
            dest: "{{ postman_install_dir }}"
            remote_src: true
            creates: "{{ postman_install_dir + '/Postman/app/Postman' }}"
            mode: u=rwx,g=rx,o=rx
          become: true

        - name: Creating Postman Desktop Launcher
          ansible.builtin.template:
            src: templates/Postman.desktop.j2
            dest: /usr/share/applications/Postman.desktop
            owner: root
            group: root
            mode: u=rw,g=r,o=r
          become: true

#         - name: Installing Bat
#           ansible.builtin.apt:
#             deb: https://github.com/sharkdp/bat/releases/download/v0.15.4/bat_0.15.4_amd64.deb
#             state: present
#           become: true
#           register: result
#           until: result is successful

    - name: Apply RedHat tasks
      when: ansible_os_family == "RedHat"
      block:
        - name: Adding Dropbox Repo
          ansible.builtin.yum_repository:
            name: dropbox
            description: Dropbox Repository
            baseurl: "http://linux.dropbox.com/{{ ansible_distribution | lower }}/{{ ansible_distribution_version }}/"
            enabled: true
            gpgcheck: true
            gpgkey: "http://linux.dropbox.com/{{ ansible_distribution | lower }}/rpm-public-key.asc"
          become: true
          when:
            - ansible_distribution == "Fedora"

        - name: Adding Google Chrome Repo
          ansible.builtin.yum_repository:
            name: google-chrome
            description: Google Chrome
            baseurl: http://dl.google.com/linux/chrome/rpm/stable/$basearch
            enabled: true
            gpgcheck: true
            gpgkey: https://dl-ssl.google.com/linux/linux_signing_key.pub
          become: true

    - name: Apply RedHat tasks
      when:
        - ansible_os_family == "RedHat"
        - ansible_distribution != "Fedora"
      block:
        - name: Installing EPEL-Release
          ansible.builtin.yum:
            name: epel-release
          become: true
          register: result
          until: result is successful

        - name: Installing OS Packages
          ansible.builtin.yum:
            name: "{{ redhat_packages_install }}"
            state: present
          become: true
          register: result
          until: result is successful

        - name: Uninstalling OS Packages
          ansible.builtin.yum:
            name: "{{ redhat_packages_uninstall }}"
            state: absent
          become: true
          register: result
          until: result is successful

        - name: Installing ATOM Editor
          ansible.builtin.yum:
            name: "{{ atom_editor_dl }}/atom.x86_64.rpm"
            state: present
          become: true
          register: result
          until: result is successful

        - name: Installing Hyper Terminal
          ansible.builtin.yum:
            name: https://github.com/zeit/hyper/releases/download/3.0.2/hyper-3.0.2.x86_64.rpm
            state: present
          become: true
          register: result
          until: result is successful

        # - name: Installing Dropbox
        #   yum:
        #     name: nautilus-dropbox
        #     state: present
        #   become: true

        - name: Installing Google Chrome
          ansible.builtin.yum:
            name: google-chrome-stable
            state: present
          become: true
          register: result
          until: result is successful

        - name: Adding VS Code Repo
          ansible.builtin.yum_repository:
            name: vscode
            description: Visual Studio Code
            baseurl: https://packages.microsoft.com/yumrepos/vscode
            enabled: true
            gpgcheck: true
            gpgkey: https://packages.microsoft.com/keys/microsoft.asc
          become: true

        - name: Installing VS Code
          ansible.builtin.yum:
            name: code
            state: present
          become: true
          register: result
          until: result is successful

    - name: Apply Fedora specific tasks
      when:
        - ansible_os_family == "RedHat"
        - ansible_distribution == "Fedora"
      block:
        - name: Updating vim-minimal (If Installed)
          ansible.builtin.command: dnf update -y vim-minimal
          become: true

        - name: Installing OS Packages
          ansible.builtin.dnf:
            name: "{{ redhat_packages_install }}"
            state: present
          become: true
          register: result
          until: result is successful

        - name: Uninstalling OS Packages
          ansible.builtin.dnf:
            name: "{{ redhat_packages_uninstall }}"
            state: absent
          become: true
          register: result
          until: result is successful

        - name: Installing ATOM Editor
          ansible.builtin.dnf:
            name: "{{ atom_editor_dl + '/atom.x86_64.rpm' }}"
            state: present
          become: true
          register: result
          until: result is successful

        - name: Installing Dropbox
          ansible.builtin.dnf:
            name: nautilus-dropbox
            state: present
          become: true
          register: result
          until: result is successful

        - name: Installing Google Chrome
          ansible.builtin.dnf:
            name: google-chrome-stable
            state: present
          become: true
          register: result
          until: result is successful

        - name: Adding VS Code Repo
          ansible.builtin.yum_repository:
            name: vscode
            description: Visual Studio Code
            baseurl: https://packages.microsoft.com/yumrepos/vscode
            enabled: true
            gpgcheck: true
            gpgkey: https://packages.microsoft.com/keys/microsoft.asc
          become: true

        - name: Installing VS Code
          ansible.builtin.dnf:
            name: code
            state: present
          become: true
          register: result
          until: result is successful

    - name: Installing Ruby Gems
      community.general.packaging.language.gem:
        name: "{{ item.name }}"
        state: "{{ item.state }}"
      # become: true
      register: result
      until: result is successful
      loop: "{{ gem_packages }}"

    - name: Installing NPM Packages
      community.general.packaging.language.npm:
        name: "{{ item.name }}"
        state: "{{ item.state }}"
        global: "{{ item.global }}"
      become: true
      register: result
      until: result is successful
      loop: "{{ npm_packages }}"
      when:
        - npm_packages is defined
        - item.global

    - name: Installing NPM Packages
      community.general.packaging.language.npm:
        name: "{{ item.name }}"
        state: "{{ item.state }}"
        global: "{{ item.global }}"
      become: false
      register: result
      until: result is successful
      loop: "{{ npm_packages }}"
      when:
        - npm_packages is defined
        - not item.global

#     - name: Capturing ATOM Packages
#       ansible.builtin.shell: apm list | awk '{ print $2 }'
#       register: _apm_list
#       changed_when: false

#     - name: Installing ATOM Packages
#       ansible.builtin.command: "apm install {{ item }}"
#       loop: "{{ atom_editor_packages }}"
#       when: item not in _apm_list.stdout

    - name: Installing Oh My ZSH
      ansible.builtin.git:
        repo: https://github.com/robbyrussell/oh-my-zsh
        dest: $HOME/.oh-my-zsh
      when: install_oh_my_zsh | bool

    - name: Capturing Current User
      ansible.builtin.set_fact:
        _current_user: "{{ lookup('env', 'USER') }}"
      become: false

    - name: Changing Shell To ZSH
      ansible.builtin.user:
        name: "{{ _current_user }}"
        shell: /bin/zsh
      become: true
      when: install_oh_my_zsh | bool

    - name: Installing Meslo Powerline Font
      ansible.builtin.get_url:
        url: https://github.com/powerline/fonts/blob/master/Meslo%20Slashed/Meslo%20LG%20M%20Regular%20for%20Powerline.ttf?raw=true
        dest: $HOME/Library/Fonts/Meslo LG M Regular for Powerline.ttf
      when:
        - ansible_os_family == "Darwin"
        - install_oh_my_zsh|bool

    - name: Installing VS Code Extensions
      ansible.builtin.shell: cat $HOME/.dotfiles/Code/extensions.list | xargs -L1 code --install-extension
